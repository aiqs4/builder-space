name: Deploy EKS Infrastructure (Pulumi)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - up
        - destroy

permissions:
  id-token: write
  contents: read

jobs:
  pulumi:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Pulumi
      uses: pulumi/actions@v4
      with:
        command: install
        version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure Pulumi
      run: |
        pulumi login --local
        echo "${{ secrets.PULUMI_CONFIG_PASSPHRASE }}" | pulumi stack select dev --create
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

    - name: Pulumi Preview
      run: pulumi preview
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      if: ${{ contains(fromJson('["preview","up"]'), github.event.inputs.action) }}

    - name: Pulumi Up
      run: pulumi up --yes
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      if: github.event.inputs.action == 'up'

    - name: Pulumi Destroy
      run: pulumi destroy --yes
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      if: github.event.inputs.action == 'destroy'

    - name: Update kubeconfig and verify cluster
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}
        kubectl get nodes
        kubectl get pods -A
        echo "Cluster verification completed successfully"
      if: github.event.inputs.action == 'up' && success()

    - name: Cost Estimation Summary
      run: |
        echo "## ðŸ’° Estimated Monthly Costs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Based on current configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- EKS Cluster: $72.00/month" >> $GITHUB_STEP_SUMMARY
        echo "- Node Group (2x t4g.small): $28.80/month" >> $GITHUB_STEP_SUMMARY
        echo "- EBS Storage (40GB): $8.00/month" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Estimated: $108.80/month**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ’¡ **Cost Optimization Tips:**" >> $GITHUB_STEP_SUMMARY
        echo "- Use spot instances: Save ~70% on nodes" >> $GITHUB_STEP_SUMMARY
        echo "- Scale to 1 node for dev: Save ~$14/month" >> $GITHUB_STEP_SUMMARY
        echo "- Use scheduled shutdown: Save ~65% during off-hours" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”§ **Migration from Terraform:**" >> $GITHUB_STEP_SUMMARY
        echo "- Legacy Terraform code archived in terraform-legacy/" >> $GITHUB_STEP_SUMMARY
        echo "- All functionality preserved with improved Python modularity" >> $GITHUB_STEP_SUMMARY
        echo "- Cost optimization features maintained" >> $GITHUB_STEP_SUMMARY
      if: ${{ contains(fromJson('["preview","up"]'), github.event.inputs.action) }}