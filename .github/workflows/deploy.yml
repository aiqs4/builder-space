name: Deploy EKS Infrastructure (Pulumi)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - up
        - destroy
        - refresh

permissions:
  id-token: write
  contents: read

jobs:
  pulumi:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: Setup Pulumi
      uses: pulumi/actions@v6
      with:
        pulumi-version: latest

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate AWS credentials and backend
      run: |
        echo "🔐 Validating AWS credentials..."
        aws sts get-caller-identity
        
        echo "🗄️ Validating backend state storage..."
        if [ -n "${{ secrets.PULUMI_BACKEND_URL }}" ]; then
          # Extract bucket name from backend URL
          BUCKET_NAME=$(echo "${{ secrets.PULUMI_BACKEND_URL }}" | sed 's/s3:\/\///')
          aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null && echo "✅ State bucket accessible" || echo "⚠️ State bucket access issue"
        fi
        
        echo "🎯 Checking EKS prerequisites..."
        aws eks list-clusters || echo "EKS access check completed"
        
        echo "✅ Validation completed"

    - name: Configure Pulumi
      run: |
        echo "🎯 Configuring Pulumi backend..."
        pulumi login ${{ secrets.PULUMI_BACKEND_URL }}
        
        # Get KMS key ARN from bootstrap stack
        echo "🔑 Getting KMS key ARN from bootstrap stack..."
        cd ..
        BOOTSTRAP_KMS_KEY_ARN=$(cd bootstrap && pulumi stack output kms_key_arn 2>/dev/null || echo "")
        cd -
        
        if [ -n "$BOOTSTRAP_KMS_KEY_ARN" ]; then
          echo "Using KMS key for secrets: $BOOTSTRAP_KMS_KEY_ARN"
          pulumi stack select dev --create --secrets-provider="awskms://$BOOTSTRAP_KMS_KEY_ARN"
        else
          echo "No KMS key found from bootstrap, using default secrets provider"
          pulumi stack select dev --create
        fi
        echo "✅ Pulumi backend configured"

    - name: Pulumi Refresh
      run: |
        echo "🔄 Refreshing Pulumi state..."
        pulumi refresh --yes || echo "No existing state to refresh"
        echo "✅ State refresh completed"
      if: ${{ contains(fromJson('["preview","up","refresh"]'), github.event.inputs.action) }}

    - name: Pulumi Preview
      run: |
        echo "👀 Previewing infrastructure changes..."
        pulumi preview --diff
        echo "✅ Preview completed"
      if: ${{ contains(fromJson('["preview","up"]'), github.event.inputs.action) }}

    - name: Pulumi Up
      run: |
        echo "🚀 Deploying EKS infrastructure..."
        
        # Deploy with retry logic for transient errors
        for attempt in 1 2 3; do
          echo "Attempt $attempt/3"
          if pulumi up --yes; then
            echo "✅ Deployment successful on attempt $attempt"
            break
          else
            if [ $attempt -eq 3 ]; then
              echo "❌ All deployment attempts failed"
              exit 1
            fi
            echo "⚠️ Attempt $attempt failed, retrying in 60 seconds..."
            sleep 60
          fi
        done
        
        echo "✅ EKS infrastructure deployment completed"
      if: github.event.inputs.action == 'up'

    - name: Post-deployment Validation
      run: |
        echo "🔍 Validating EKS cluster deployment..."
        
        # Get cluster name from secrets or default
        CLUSTER_NAME="${{ secrets.CLUSTER_NAME }}"
        if [ -z "$CLUSTER_NAME" ]; then
          CLUSTER_NAME="builder-space"
        fi
        
        # Update kubeconfig
        echo "📋 Updating kubeconfig..."
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name "$CLUSTER_NAME"
        
        # Validate cluster connectivity
        echo "🔗 Testing cluster connectivity..."
        if kubectl cluster-info 2>/dev/null; then
          echo "✅ Cluster connectivity verified"
        else
          echo "⚠️ Cluster connectivity issue - will retry"
          sleep 30
          kubectl cluster-info
        fi
        
        # Check cluster nodes
        echo "🖥️ Checking cluster nodes..."
        kubectl get nodes -o wide || echo "⚠️ Node check failed - cluster may still be initializing"
        
        # Check system pods
        echo "🏃 Checking system pods..."
        kubectl get pods -A --field-selector=status.phase!=Running 2>/dev/null || echo "All system pods running"
        
        # Basic cluster health summary
        echo "## 🔍 EKS Cluster Validation" >> $GITHUB_STEP_SUMMARY
        echo "- Cluster: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
        echo "- Region: ${{ secrets.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Cluster connectivity: ✅" >> $GITHUB_STEP_SUMMARY
        
        NODE_COUNT=$(kubectl get nodes --no-headers 2>/dev/null | wc -l || echo "0")
        echo "- Active nodes: $NODE_COUNT" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Cluster validation completed"
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      if: github.event.inputs.action == 'up' && success()

    - name: Update kubeconfig and verify cluster
      run: |
        echo "🔧 Final cluster verification..."
        CLUSTER_NAME="${{ secrets.CLUSTER_NAME }}"
        if [ -z "$CLUSTER_NAME" ]; then
          CLUSTER_NAME="builder-space"
        fi
        
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name "$CLUSTER_NAME"
        kubectl get nodes
        kubectl get pods -A
        echo "✅ Cluster verification completed successfully"
      if: github.event.inputs.action == 'up' && success()

    - name: Pulumi Destroy
      run: |
        echo "🗑️ Destroying EKS infrastructure..."
        pulumi destroy --yes
        echo "⚠️ EKS infrastructure destroyed" >> $GITHUB_STEP_SUMMARY
      if: github.event.inputs.action == 'destroy'

    - name: Cost Estimation Summary
      run: |
        echo "## 💰 Estimated Monthly Costs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Based on current configuration:" >> $GITHUB_STEP_SUMMARY
        echo "- EKS Cluster: $72.00/month" >> $GITHUB_STEP_SUMMARY
        echo "- Node Group (2x t4g.small): $28.80/month" >> $GITHUB_STEP_SUMMARY
        echo "- EBS Storage (40GB): $8.00/month" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Estimated: $108.80/month**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Cost Optimization Tips:**" >> $GITHUB_STEP_SUMMARY
        echo "- Use spot instances: Save ~70% on nodes" >> $GITHUB_STEP_SUMMARY
        echo "- Scale to 1 node for dev: Save ~$14/month" >> $GITHUB_STEP_SUMMARY
        echo "- Use scheduled shutdown: Save ~65% during off-hours" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Migration from Terraform:**" >> $GITHUB_STEP_SUMMARY
        echo "- Legacy Terraform code archived in terraform-legacy/" >> $GITHUB_STEP_SUMMARY
        echo "- All functionality preserved with improved Python modularity" >> $GITHUB_STEP_SUMMARY
        echo "- Cost optimization features maintained" >> $GITHUB_STEP_SUMMARY
        echo "- Enhanced robustness with idempotent deployments" >> $GITHUB_STEP_SUMMARY
      if: ${{ contains(fromJson('["preview","up"]'), github.event.inputs.action) }}