name: Deploy EKS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      use_backend:
        description: 'Use S3 backend (requires backend to be bootstrapped first)'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
  push:
    branches: [ main ]
    paths: [ 
      '*.tf', 
      'modules/**/*.tf',
      'deploy.sh',
      '.github/workflows/deploy.yml'
    ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.8

    - name: Cache Terraform providers
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform/providers
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Configure Backend (if enabled)
      run: |
        if [ "${{ github.event.inputs.use_backend }}" = "true" ] || [ -n "${{ secrets.BACKEND_BUCKET }}" ]; then
          echo "Configuring S3 backend..."
          
          # Check if backend bucket is configured
          if [ -n "${{ secrets.BACKEND_BUCKET }}" ] && [ -n "${{ secrets.BACKEND_DYNAMODB_TABLE }}" ]; then
            cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket         = "${{ secrets.BACKEND_BUCKET }}"
            key            = "terraform.tfstate"
            region         = "${{ secrets.AWS_REGION }}"
            dynamodb_table = "${{ secrets.BACKEND_DYNAMODB_TABLE }}"
            encrypt        = true
          }
        }
        EOF
            echo "✅ S3 backend configuration created"
          else
            echo "⚠️ Backend requested but BACKEND_BUCKET or BACKEND_DYNAMODB_TABLE secrets not configured"
            echo "Please run the backend-bootstrap workflow first or configure the secrets"
            exit 1
          fi
        else
          echo "📁 Using local backend (not recommended for production)"
        fi
      if: github.event.inputs.use_backend == 'true' || secrets.BACKEND_BUCKET != ''

    - name: Terraform Init
      run: |
        terraform init
        echo "✅ Terraform initialized successfully"

    - name: Terraform Validate
      run: |
        terraform validate
        echo "✅ Terraform configuration is valid"

    - name: Terraform Format Check
      run: |
        if ! terraform fmt -check -diff; then
          echo "❌ Terraform files are not properly formatted"
          echo "Please run 'terraform fmt -recursive' locally and commit the changes"
          exit 1
        fi
        echo "✅ Terraform files are properly formatted"

    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan.txt
        
        echo "## 📋 Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        grep -E "(Plan:|No changes)" plan.txt | head -5 >> $GITHUB_STEP_SUMMARY || echo "Plan completed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
      if: ${{ contains(fromJson('["plan","apply"]'), github.event.inputs.action) || github.event_name == 'push' }}

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: |
          tfplan
          plan.txt
        retention-days: 5
      if: ${{ contains(fromJson('["plan","apply"]'), github.event.inputs.action) || github.event_name == 'push' }}

    - name: Security Scan (Optional)
      run: |
        # Add security scanning here if needed
        echo "🔍 Security scan placeholder - add tools like checkov or tfsec here"
      continue-on-error: true
      if: github.event.inputs.action == 'apply'

    - name: Terraform Apply
      run: |
        echo "🚀 Applying Terraform configuration..."
        terraform apply -auto-approve tfplan
        
        echo "## ✅ Infrastructure Deployment Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Cluster Information:" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        terraform output -json cluster_info >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
      if: github.event.inputs.action == 'apply'

    - name: Terraform Destroy
      run: |
        echo "⚠️ Destroying infrastructure..."
        terraform destroy -auto-approve
        
        echo "## 🗑️ Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
        echo "All AWS resources have been removed." >> $GITHUB_STEP_SUMMARY
      if: github.event.inputs.action == 'destroy'

    - name: Update kubeconfig and verify cluster
      run: |
        echo "🔧 Configuring kubectl..."
        CLUSTER_NAME=$(terraform output -raw cluster_name)
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $CLUSTER_NAME
        
        echo "🔍 Verifying cluster..."
        kubectl get nodes
        kubectl get pods -A
        kubectl cluster-info
        
        echo "### 🎉 Cluster Verification Completed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get nodes >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
      if: github.event.inputs.action == 'apply' && success()

    - name: Cost and Configuration Summary
      run: |
        echo "## 💰 Cost Estimation" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        terraform output -json estimated_monthly_cost >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## ⚙️ Configuration Summary" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        terraform output -json configuration_summary >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
        terraform output next_steps | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
      if: ${{ contains(fromJson('["plan","apply"]'), github.event.inputs.action) }}

    - name: Migration Information
      run: |
        echo "## 🔄 Migration Information" >> $GITHUB_STEP_SUMMARY
        echo "If you have existing resources that need to be imported:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        terraform output -raw migration_info | jq -r '.import_commands[]' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
      if: github.event.inputs.action == 'plan'